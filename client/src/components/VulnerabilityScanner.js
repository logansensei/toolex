import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import {
  FiShield,
  FiAlertTriangle,
  FiCheckCircle,
  FiClock,
  FiTarget,
  FiEye,
  FiZap,
  FiLock,
  FiKey,
  FiDatabase,
  FiGlobe,
  FiCode,
  FiActivity
} from 'react-icons/fi';

const ScannerContainer = styled.div`
  background: rgba(26, 26, 26, 0.8);
  border: 1px solid #333;
  border-radius: 16px;
  padding: 32px;
  backdrop-filter: blur(10px);
  margin-bottom: 32px;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #00ff88, #0088ff, #ff6b6b, #ffaa00);
    background-size: 200% 100%;
    animation: gradientShift 3s ease-in-out infinite;
  }

  @keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
`;

const ScannerHeader = styled.div`
  text-align: center;
  margin-bottom: 32px;
`;

const ScannerTitle = styled.h2`
  font-size: 28px;
  font-weight: 700;
  color: #fff;
  margin: 0 0 8px 0;
  background: linear-gradient(135deg, #00ff88, #0088ff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
`;

const ScannerSubtitle = styled.p`
  font-size: 16px;
  color: #b0b0b0;
  margin: 0;
`;

const ScanForm = styled.form`
  display: grid;
  grid-template-columns: 1fr auto;
  gap: 16px;
  margin-bottom: 32px;

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
`;

const UrlInput = styled.input`
  padding: 16px 20px;
  background: rgba(255, 255, 255, 0.05);
  border: 2px solid #333;
  border-radius: 12px;
  color: #fff;
  font-size: 16px;
  transition: all 0.3s ease;

  &:focus {
    outline: none;
    border-color: #00ff88;
    box-shadow: 0 0 0 4px rgba(0, 255, 136, 0.1);
    background: rgba(255, 255, 255, 0.08);
  }

  &::placeholder {
    color: #666;
  }
`;

const ScanButton = styled.button`
  padding: 16px 32px;
  background: linear-gradient(135deg, #00ff88, #00cc6a);
  border: none;
  border-radius: 12px;
  color: #000;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 8px;
  transition: all 0.3s ease;
  white-space: nowrap;

  &:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 255, 136, 0.3);
  }

  &:active:not(:disabled) {
    transform: translateY(0);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }
`;

const ScanOptions = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 16px;
  margin-bottom: 32px;
`;

const OptionCard = styled(motion.div)`
  background: rgba(255, 255, 255, 0.03);
  border: 1px solid #333;
  border-radius: 8px;
  padding: 16px;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    border-color: #00ff88;
    background: rgba(0, 255, 136, 0.05);
  }

  &.active {
    border-color: #00ff88;
    background: rgba(0, 255, 136, 0.1);
  }
`;

const OptionHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  margin-bottom: 8px;
`;

const OptionIcon = styled.div`
  width: 32px;
  height: 32px;
  border-radius: 6px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  background: ${props => props.bgColor || 'rgba(0, 255, 136, 0.1)'};
  color: ${props => props.color || '#00ff88'};
`;

const OptionTitle = styled.h4`
  font-size: 14px;
  font-weight: 600;
  color: #fff;
  margin: 0;
`;

const OptionDescription = styled.p`
  font-size: 12px;
  color: #b0b0b0;
  margin: 0;
  line-height: 1.4;
`;

const ScanProgress = styled(motion.div)`
  background: rgba(0, 0, 0, 0.3);
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 24px;
`;

const ProgressHeader = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
`;

const ProgressTitle = styled.h3`
  font-size: 18px;
  font-weight: 600;
  color: #fff;
  margin: 0;
  display: flex;
  align-items: center;
  gap: 8px;
`;

const ProgressBar = styled.div`
  width: 100%;
  height: 8px;
  background: #333;
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 12px;
`;

const ProgressFill = styled(motion.div)`
  height: 100%;
  background: linear-gradient(90deg, #00ff88, #0088ff);
  border-radius: 4px;
`;

const ProgressText = styled.div`
  font-size: 14px;
  color: #b0b0b0;
  text-align: center;
`;

const ResultsGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 20px;
  margin-top: 24px;
`;

const ResultCard = styled(motion.div)`
  background: rgba(255, 255, 255, 0.03);
  border: 1px solid #333;
  border-radius: 8px;
  padding: 16px;
  transition: all 0.3s ease;

  &:hover {
    border-color: #00ff88;
    background: rgba(0, 255, 136, 0.05);
  }
`;

const ResultHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 8px;
`;

const ResultIcon = styled.div`
  width: 24px;
  height: 24px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 12px;
  background: ${props => props.bgColor || 'rgba(0, 255, 136, 0.1)'};
  color: ${props => props.color || '#00ff88'};
`;

const ResultTitle = styled.h4`
  font-size: 14px;
  font-weight: 600;
  color: #fff;
  margin: 0;
`;

const ResultCount = styled.span`
  font-size: 12px;
  color: #666;
  margin-left: auto;
`;

const VulnerabilityScanner = () => {
  const [targetUrl, setTargetUrl] = useState('');
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [scanResults, setScanResults] = useState(null);
  const [selectedOptions, setSelectedOptions] = useState({
    xss: true,
    sqli: true,
    ssrf: true,
    xxe: true,
    csrf: true,
    idor: true,
    lfi: true,
    rfi: true,
    ssti: true,
    deserialization: true,
    jwt: true,
    cors: true,
    secrets: true,
    subdomains: true,
    s3Buckets: true
  });

  const scanOptions = [
    {
      id: 'xss',
      title: 'XSS Detection',
      description: 'Cross-Site Scripting vulnerabilities',
      icon: <FiAlertTriangle />,
      bgColor: 'rgba(255, 68, 68, 0.1)',
      color: '#ff4444'
    },
    {
      id: 'sqli',
      title: 'SQL Injection',
      description: 'Database injection attacks',
      icon: <FiDatabase />,
      bgColor: 'rgba(255, 68, 68, 0.1)',
      color: '#ff4444'
    },
    {
      id: 'ssrf',
      title: 'SSRF',
      description: 'Server-Side Request Forgery',
      icon: <FiGlobe />,
      bgColor: 'rgba(255, 170, 0, 0.1)',
      color: '#ffaa00'
    },
    {
      id: 'xxe',
      title: 'XXE',
      description: 'XML External Entity attacks',
      icon: <FiCode />,
      bgColor: 'rgba(255, 170, 0, 0.1)',
      color: '#ffaa00'
    },
    {
      id: 'csrf',
      title: 'CSRF',
      description: 'Cross-Site Request Forgery',
      icon: <FiShield />,
      bgColor: 'rgba(68, 136, 255, 0.1)',
      color: '#4488ff'
    },
    {
      id: 'idor',
      title: 'IDOR',
      description: 'Insecure Direct Object Reference',
      icon: <FiKey />,
      bgColor: 'rgba(68, 136, 255, 0.1)',
      color: '#4488ff'
    },
    {
      id: 'lfi',
      title: 'LFI',
      description: 'Local File Inclusion',
      icon: <FiLock />,
      bgColor: 'rgba(255, 170, 0, 0.1)',
      color: '#ffaa00'
    },
    {
      id: 'rfi',
      title: 'RFI',
      description: 'Remote File Inclusion',
      icon: <FiGlobe />,
      bgColor: 'rgba(255, 68, 68, 0.1)',
      color: '#ff4444'
    },
    {
      id: 'ssti',
      title: 'SSTI',
      description: 'Server-Side Template Injection',
      icon: <FiCode />,
      bgColor: 'rgba(255, 170, 0, 0.1)',
      color: '#ffaa00'
    },
    {
      id: 'deserialization',
      title: 'Deserialization',
      description: 'Insecure deserialization',
      icon: <FiActivity />,
      bgColor: 'rgba(255, 68, 68, 0.1)',
      color: '#ff4444'
    },
    {
      id: 'jwt',
      title: 'JWT Issues',
      description: 'JSON Web Token vulnerabilities',
      icon: <FiKey />,
      bgColor: 'rgba(68, 136, 255, 0.1)',
      color: '#4488ff'
    },
    {
      id: 'cors',
      title: 'CORS',
      description: 'Cross-Origin Resource Sharing',
      icon: <FiShield />,
      bgColor: 'rgba(68, 136, 255, 0.1)',
      color: '#4488ff'
    },
    {
      id: 'secrets',
      title: 'Secrets',
      description: 'Exposed API keys and tokens',
      icon: <FiKey />,
      bgColor: 'rgba(255, 68, 68, 0.1)',
      color: '#ff4444'
    },
    {
      id: 'subdomains',
      title: 'Subdomains',
      description: 'Subdomain enumeration',
      icon: <FiGlobe />,
      bgColor: 'rgba(0, 255, 136, 0.1)',
      color: '#00ff88'
    },
    {
      id: 's3Buckets',
      title: 'S3 Buckets',
      description: 'AWS S3 bucket discovery',
      icon: <FiDatabase />,
      bgColor: 'rgba(0, 255, 136, 0.1)',
      color: '#00ff88'
    }
  ];

  const handleOptionToggle = (optionId) => {
    setSelectedOptions(prev => ({
      ...prev,
      [optionId]: !prev[optionId]
    }));
  };

  const handleScan = async (e) => {
    e.preventDefault();
    if (!targetUrl) return;

    setIsScanning(true);
    setScanProgress(0);
    setScanResults(null);

    // Simulate scan progress
    const progressInterval = setInterval(() => {
      setScanProgress(prev => {
        if (prev >= 100) {
          clearInterval(progressInterval);
          setIsScanning(false);
          // Simulate results
          setScanResults({
            vulnerabilities: 12,
            critical: 3,
            high: 5,
            medium: 3,
            low: 1,
            endpoints: 45,
            secrets: 2,
            subdomains: 8
          });
          return 100;
        }
        return prev + Math.random() * 10;
      });
    }, 200);
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'critical': return '#ff4444';
      case 'high': return '#ffaa00';
      case 'medium': return '#4488ff';
      case 'low': return '#00ff88';
      default: return '#666';
    }
  };

  const getSeverityBgColor = (severity) => {
    switch (severity) {
      case 'critical': return 'rgba(255, 68, 68, 0.1)';
      case 'high': return 'rgba(255, 170, 0, 0.1)';
      case 'medium': return 'rgba(68, 136, 255, 0.1)';
      case 'low': return 'rgba(0, 255, 136, 0.1)';
      default: return 'rgba(102, 102, 102, 0.1)';
    }
  };

  return (
    <ScannerContainer>
      <ScannerHeader>
        <ScannerTitle>Advanced Vulnerability Scanner</ScannerTitle>
        <ScannerSubtitle>
          Comprehensive security testing with modern pentesting techniques
        </ScannerSubtitle>
      </ScannerHeader>

      <ScanForm onSubmit={handleScan}>
        <UrlInput
          type="url"
          placeholder="https://example.com"
          value={targetUrl}
          onChange={(e) => setTargetUrl(e.target.value)}
          disabled={isScanning}
        />
        <ScanButton type="submit" disabled={isScanning || !targetUrl}>
          {isScanning ? (
            <>
              <FiClock className="animate-spin" />
              Scanning...
            </>
          ) : (
            <>
              <FiZap />
              Start Scan
            </>
          )}
        </ScanButton>
      </ScanForm>

      <ScanOptions>
        {scanOptions.map((option) => (
          <OptionCard
            key={option.id}
            className={selectedOptions[option.id] ? 'active' : ''}
            onClick={() => handleOptionToggle(option.id)}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
          >
            <OptionHeader>
              <OptionIcon bgColor={option.bgColor} color={option.color}>
                {option.icon}
              </OptionIcon>
              <OptionTitle>{option.title}</OptionTitle>
            </OptionHeader>
            <OptionDescription>{option.description}</OptionDescription>
          </OptionCard>
        ))}
      </ScanOptions>

      <AnimatePresence>
        {isScanning && (
          <ScanProgress
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
          >
            <ProgressHeader>
              <ProgressTitle>
                <FiActivity className="animate-pulse" />
                Scanning in Progress
              </ProgressTitle>
              <span style={{ color: '#00ff88', fontWeight: '600' }}>
                {Math.round(scanProgress)}%
              </span>
            </ProgressHeader>
            <ProgressBar>
              <ProgressFill
                initial={{ width: 0 }}
                animate={{ width: `${scanProgress}%` }}
                transition={{ duration: 0.3 }}
              />
            </ProgressBar>
            <ProgressText>
              Analyzing security vulnerabilities...
            </ProgressText>
          </ScanProgress>
        )}
      </AnimatePresence>

      <AnimatePresence>
        {scanResults && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            <ResultsGrid>
              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(255, 68, 68, 0.1)" color="#ff4444">
                    <FiAlertTriangle />
                  </ResultIcon>
                  <ResultTitle>Vulnerabilities</ResultTitle>
                  <ResultCount>{scanResults.vulnerabilities}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(255, 68, 68, 0.1)" color="#ff4444">
                    <FiAlertTriangle />
                  </ResultIcon>
                  <ResultTitle>Critical</ResultTitle>
                  <ResultCount>{scanResults.critical}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(255, 170, 0, 0.1)" color="#ffaa00">
                    <FiAlertTriangle />
                  </ResultIcon>
                  <ResultTitle>High</ResultTitle>
                  <ResultCount>{scanResults.high}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(68, 136, 255, 0.1)" color="#4488ff">
                    <FiAlertTriangle />
                  </ResultIcon>
                  <ResultTitle>Medium</ResultTitle>
                  <ResultCount>{scanResults.medium}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(0, 255, 136, 0.1)" color="#00ff88">
                    <FiCheckCircle />
                  </ResultIcon>
                  <ResultTitle>Low</ResultTitle>
                  <ResultCount>{scanResults.low}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(0, 136, 255, 0.1)" color="#0088ff">
                    <FiTarget />
                  </ResultIcon>
                  <ResultTitle>Endpoints</ResultTitle>
                  <ResultCount>{scanResults.endpoints}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(255, 68, 68, 0.1)" color="#ff4444">
                    <FiKey />
                  </ResultIcon>
                  <ResultTitle>Secrets</ResultTitle>
                  <ResultCount>{scanResults.secrets}</ResultCount>
                </ResultHeader>
              </ResultCard>

              <ResultCard>
                <ResultHeader>
                  <ResultIcon bgColor="rgba(0, 255, 136, 0.1)" color="#00ff88">
                    <FiGlobe />
                  </ResultIcon>
                  <ResultTitle>Subdomains</ResultTitle>
                  <ResultCount>{scanResults.subdomains}</ResultCount>
                </ResultHeader>
              </ResultCard>
            </ResultsGrid>
          </motion.div>
        )}
      </AnimatePresence>
    </ScannerContainer>
  );
};

export default VulnerabilityScanner;
